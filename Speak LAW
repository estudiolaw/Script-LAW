# Script de Automa√ß√£o com Text-to-Speech
# Criado para automatizar tarefas com feedback de voz

# Carrega o assembly para s√≠ntese de voz
Add-Type -AssemblyName System.Speech
$tts = New-Object System.Speech.Synthesis.SpeechSynthesizer

# Configura√ß√µes de voz
$tts.SelectVoiceByHints([System.Speech.Synthesis.VoiceGender]::Female)
$tts.Rate = 0  # Velocidade da fala (-10 a 10)
$tts.Volume = 80  # Volume (0 a 100)

# Fun√ß√£o para falar texto
function Speak-Text {
    param([string]$text)
    Write-Host "üîä Falando: $text" -ForegroundColor Green
    $tts.Speak($text)
}

# Fun√ß√£o para limpar arquivos tempor√°rios
function Clear-TempFiles {
    Speak-Text "Iniciando limpeza de arquivos tempor√°rios"
    
    $tempPaths = @(
        "$env:TEMP\*",
        "$env:LOCALAPPDATA\Temp\*",
        "$env:WINDIR\Temp\*"
    )
    
    $totalCleaned = 0
    foreach ($path in $tempPaths) {
        try {
            $files = Get-ChildItem -Path $path -Recurse -Force -ErrorAction SilentlyContinue
            $count = $files.Count
            Remove-Item -Path $path -Recurse -Force -ErrorAction SilentlyContinue
            $totalCleaned += $count
            Write-Host "‚úÖ Limpeza conclu√≠da: $path ($count arquivos)" -ForegroundColor Yellow
        }
        catch {
            Write-Host "‚ö†Ô∏è Erro ao limpar: $path" -ForegroundColor Red
        }
    }
    
    Speak-Text "Limpeza conclu√≠da. $totalCleaned arquivos removidos"
}

# Fun√ß√£o para verificar atualiza√ß√µes do sistema
function Check-WindowsUpdates {
    Speak-Text "Verificando atualiza√ß√µes do Windows"
    
    try {
        # Instala o m√≥dulo PSWindowsUpdate se n√£o estiver instalado
        if (!(Get-Module -ListAvailable -Name PSWindowsUpdate)) {
            Speak-Text "Instalando m√≥dulo de atualiza√ß√µes"
            Install-Module PSWindowsUpdate -Force -Scope CurrentUser
        }
        
        Import-Module PSWindowsUpdate
        $updates = Get-WUList
        
        if ($updates.Count -gt 0) {
            Speak-Text "Encontradas $($updates.Count) atualiza√ß√µes dispon√≠veis"
            Write-Host "üìã Atualiza√ß√µes dispon√≠veis:" -ForegroundColor Cyan
            $updates | ForEach-Object { Write-Host "  - $($_.Title)" -ForegroundColor White }
        } else {
            Speak-Text "Sistema est√° atualizado"
            Write-Host "‚úÖ Nenhuma atualiza√ß√£o dispon√≠vel" -ForegroundColor Green
        }
    }
    catch {
        Speak-Text "Erro ao verificar atualiza√ß√µes"
        Write-Host "‚ùå Erro: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Fun√ß√£o para verificar status do sistema
function Check-SystemStatus {
    Speak-Text "Verificando status do sistema"
    
    # Uso da CPU
    $cpu = Get-Counter "\Processor(_Total)\% Processor Time" | Select-Object -ExpandProperty CounterSamples | Select-Object -ExpandProperty CookedValue
    $cpu = [Math]::Round($cpu, 2)
    
    # Uso da RAM
    $memory = Get-CimInstance -ClassName Win32_OperatingSystem
    $totalRAM = [Math]::Round($memory.TotalVisibleMemorySize / 1MB, 2)
    $freeRAM = [Math]::Round($memory.FreePhysicalMemory / 1MB, 2)
    $usedRAM = [Math]::Round($totalRAM - $freeRAM, 2)
    $ramPercent = [Math]::Round(($usedRAM / $totalRAM) * 100, 2)
    
    # Espa√ßo em disco (unidade C:)
    $disk = Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DeviceID='C:'"
    $totalDisk = [Math]::Round($disk.Size / 1GB, 2)
    $freeDisk = [Math]::Round($disk.FreeSpace / 1GB, 2)
    $usedDisk = [Math]::Round($totalDisk - $freeDisk, 2)
    $diskPercent = [Math]::Round(($usedDisk / $totalDisk) * 100, 2)
    
    Write-Host "üìä Status do Sistema:" -ForegroundColor Cyan
    Write-Host "  CPU: $cpu%" -ForegroundColor $(if($cpu -gt 80) {"Red"} else {"Green"})
    Write-Host "  RAM: $ramPercent% ($usedRAM GB de $totalRAM GB)" -ForegroundColor $(if($ramPercent -gt 80) {"Red"} else {"Green"})
    Write-Host "  Disco C: $diskPercent% ($usedDisk GB de $totalDisk GB)" -ForegroundColor $(if($diskPercent -gt 80) {"Red"} else {"Green"})
    
    $statusMsg = "CPU em $cpu por cento, RAM em $ramPercent por cento, Disco em $diskPercent por cento"
    Speak-Text $statusMsg
}

# Fun√ß√£o para fazer backup de arquivos importantes
function Backup-ImportantFiles {
    param([string]$backupPath = "C:\Backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')")
    
    Speak-Text "Iniciando backup de arquivos importantes"
    
    # Cria diret√≥rio de backup
    New-Item -Path $backupPath -ItemType Directory -Force | Out-Null
    
    # Pastas para backup
    $foldersToBackup = @(
        "$env:USERPROFILE\Desktop",
        "$env:USERPROFILE\Documents",
        "$env:USERPROFILE\Downloads",
        "$env:USERPROFILE\Pictures"
    )
    
    foreach ($folder in $foldersToBackup) {
        if (Test-Path $folder) {
            $folderName = Split-Path $folder -Leaf
            $destPath = Join-Path $backupPath $folderName
            
            try {
                Copy-Item -Path $folder -Destination $destPath -Recurse -Force
                Write-Host "‚úÖ Backup conclu√≠do: $folderName" -ForegroundColor Green
            }
            catch {
                Write-Host "‚ùå Erro no backup: $folderName" -ForegroundColor Red
            }
        }
    }
    
    Speak-Text "Backup conclu√≠do em $backupPath"
}

# Fun√ß√£o para organizar √°rea de trabalho
function Organize-Desktop {
    Speak-Text "Organizando √°rea de trabalho"
    
    $desktop = [Environment]::GetFolderPath("Desktop")
    $organized = Join-Path $desktop "Arquivos_Organizados_$(Get-Date -Format 'yyyyMMdd')"
    
    # Cria pastas de organiza√ß√£o
    $folders = @("Documentos", "Imagens", "Videos", "Executaveis", "Outros")
    foreach ($folder in $folders) {
        New-Item -Path (Join-Path $organized $folder) -ItemType Directory -Force | Out-Null
    }
    
    # Organiza arquivos por extens√£o
    $files = Get-ChildItem -Path $desktop -File
    foreach ($file in $files) {
        $dest = switch ($file.Extension.ToLower()) {
            {$_ -in ".txt", ".doc", ".docx", ".pdf", ".rtf"} { "Documentos" }
            {$_ -in ".jpg", ".jpeg", ".png", ".gif", ".bmp"} { "Imagens" }
            {$_ -in ".mp4", ".avi", ".mkv", ".mov", ".wmv"} { "Videos" }
            {$_ -in ".exe", ".msi", ".bat", ".cmd"} { "Executaveis" }
            default { "Outros" }
        }
        
        try {
            Move-Item -Path $file.FullName -Destination (Join-Path $organized $dest) -Force
            Write-Host "üìÅ Movido: $($file.Name) ‚Üí $dest" -ForegroundColor Yellow
        }
        catch {
            Write-Host "‚ùå Erro ao mover: $($file.Name)" -ForegroundColor Red
        }
    }
    
    Speak-Text "√Årea de trabalho organizada"
}

# Menu principal
function Show-Menu {
    Clear-Host
    Write-Host "ü§ñ SCRIPT DE AUTOMA√á√ÉO COM VOICE" -ForegroundColor Cyan
    Write-Host "=================================" -ForegroundColor Cyan
    Write-Host "1. Limpar arquivos tempor√°rios" -ForegroundColor White
    Write-Host "2. Verificar status do sistema" -ForegroundColor White
    Write-Host "3. Verificar atualiza√ß√µes do Windows" -ForegroundColor White
    Write-Host "4. Fazer backup de arquivos importantes" -ForegroundColor White
    Write-Host "5. Organizar √°rea de trabalho" -ForegroundColor White
    Write-Host "6. Executar todas as tarefas" -ForegroundColor White
    Write-Host "0. Sair" -ForegroundColor White
    Write-Host "=================================" -ForegroundColor Cyan
}

# Loop principal
do {
    Show-Menu
    Speak-Text "Escolha uma op√ß√£o do menu"
    $choice = Read-Host "Digite sua escolha"
    
    switch ($choice) {
        "1" { Clear-TempFiles }
        "2" { Check-SystemStatus }
        "3" { Check-WindowsUpdates }
        "4" { 
            $backupPath = Read-Host "Digite o caminho do backup (Enter para padr√£o)"
            if ([string]::IsNullOrWhiteSpace($backupPath)) {
                Backup-ImportantFiles
            } else {
                Backup-ImportantFiles -backupPath $backupPath
            }
        }
        "5" { Organize-Desktop }
        "6" {
            Speak-Text "Executando todas as tarefas de automa√ß√£o"
            Clear-TempFiles
            Check-SystemStatus
            Check-WindowsUpdates
            Backup-ImportantFiles
            Organize-Desktop
            Speak-Text "Todas as tarefas foram conclu√≠das"
        }
        "0" { 
            Speak-Text "Encerrando script de automa√ß√£o. At√© logo!"
            break 
        }
        default { 
            Speak-Text "Op√ß√£o inv√°lida. Tente novamente"
            Write-Host "‚ùå Op√ß√£o inv√°lida!" -ForegroundColor Red 
        }
    }
    
    if ($choice -ne "0") {
        Write-Host "`nPressione qualquer tecla para continuar..." -ForegroundColor Gray
        $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    }
} while ($choice -ne "0")

# Libera recursos
$tts.Dispose()
