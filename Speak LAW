<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Automa√ß√£o Speak - Atividades Pendentes</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            color: white;
        }
        
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.2em;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            margin: 15px 0;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }
        
        .btn {
            background: linear-gradient(45deg, #ff6b6b, #ee5a52);
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 5px;
            font-size: 14px;
        }
        
        .btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }
        
        .btn.secondary {
            background: linear-gradient(45deg, #4ecdc4, #44a08d);
        }
        
        .btn.secondary:hover {
            box-shadow: 0 5px 15px rgba(78, 205, 196, 0.4);
        }
        
        .status {
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            display: inline-block;
            margin: 10px 0;
        }
        
        .status.running {
            background: rgba(255, 193, 7, 0.2);
            color: #ffc107;
            border: 1px solid #ffc107;
        }
        
        .status.stopped {
            background: rgba(220, 53, 69, 0.2);
            color: #dc3545;
            border: 1px solid #dc3545;
        }
        
        .status.success {
            background: rgba(40, 167, 69, 0.2);
            color: #28a745;
            border: 1px solid #28a745;
        }
        
        .instructions {
            background: rgba(255, 255, 255, 0.05);
            border-left: 4px solid #4ecdc4;
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 10px 10px 0;
        }
        
        .code-snippet {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            overflow-x: auto;
            margin: 15px 0;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .warning {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid #ffc107;
            color: #ffc107;
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Automa√ß√£o Speak</h1>
        
        <div class="warning">
            ‚ö†Ô∏è <strong>Aviso:</strong> Use com responsabilidade! Automa√ß√£o excessiva pode violar os termos de uso do Speak.
        </div>
        
        <div class="card">
            <h3>üìã Script para Console do Navegador</h3>
            <p>Cole este c√≥digo no console do navegador (F12) quando estiver na p√°gina do Speak:</p>
            
            <div class="code-snippet" id="script-code">
// Script de Automa√ß√£o para Speak - VERS√ÉO UM CLIQUE
(function() {
    'use strict';
    
    // Configura√ß√µes
    const CONFIG = {
        delay: 1500, // Delay entre a√ß√µes (ms)
        maxAttempts: 50, // M√°ximo de tentativas
        fastMode: true // Modo r√°pido
    };
    
    let attempts = 0;
    let completed = 0;
    
    // Fun√ß√£o de delay
    const wait = ms => new Promise(resolve => setTimeout(resolve, ms));
    
    // Seletores mais abrangentes do Speak
    const SELECTORS = [
        // Bot√µes principais
        'button[data-testid*="continue"]',
        'button[data-testid*="next"]',
        'button[data-testid*="start"]',
        'button[data-testid*="complete"]',
        'button[data-testid*="practice"]',
        
        // Classes comuns
        '.continue-btn, .next-btn, .start-btn',
        '.lesson-btn, .practice-btn, .complete-btn',
        'button[class*="continue"]',
        'button[class*="next"]',
        'button[class*="start"]',
        'button[class*="practice"]',
        
        // Bot√µes por texto (portugu√™s/ingl√™s)
        'button:contains("Continuar")',
        'button:contains("Pr√≥ximo")',
        'button:contains("Continue")',
        'button:contains("Next")',
        'button:contains("Start")',
        'button:contains("Iniciar")',
        'button:contains("Praticar")',
        'button:contains("Practice")',
        
        // Bot√µes gen√©ricos ativos
        'button:not([disabled]):visible',
        'a[role="button"]:visible',
        
        // Seletores espec√≠ficos do Speak (atualizados)
        '[data-cy*="continue"]',
        '[data-cy*="next"]',
        '[data-cy*="start"]',
        'div[role="button"]:visible'
    ];
    
    // Fun√ß√£o melhorada para encontrar elementos
    function findClickableElement() {
        for (let selector of SELECTORS) {
            let elements;
            
            if (selector.includes(':contains')) {
                const text = selector.match(/:contains\("([^"]+)"\)/)[1];
                elements = Array.from(document.querySelectorAll('button, a[role="button"]'))
                    .filter(el => el.textContent.trim().includes(text) && isVisible(el));
            } else {
                elements = Array.from(document.querySelectorAll(selector))
                    .filter(isVisible);
            }
            
            if (elements.length > 0) {
                // Prioriza bot√µes com texto relevante
                const priorityElement = elements.find(el => {
                    const text = el.textContent.toLowerCase();
                    return text.includes('continuar') || text.includes('continue') || 
                           text.includes('pr√≥ximo') || text.includes('next') ||
                           text.includes('iniciar') || text.includes('start');
                });
                
                return priorityElement || elements[0];
            }
        }
        return null;
    }
    
    // Verifica se elemento est√° vis√≠vel
    function isVisible(element) {
        if (!element) return false;
        const style = window.getComputedStyle(element);
        return style.display !== 'none' && 
               style.visibility !== 'hidden' && 
               style.opacity !== '0' &&
               element.offsetWidth > 0 && 
               element.offsetHeight > 0;
    }
    
    // Fun√ß√£o principal de automa√ß√£o
    async function autoComplete() {
        console.log('üöÄ INICIANDO AUTOMA√á√ÉO SPEAK - MODO UM CLIQUE');
        console.log('‚è±Ô∏è Configura√ß√£o:', CONFIG);
        
        while (attempts < CONFIG.maxAttempts) {
            attempts++;
            
            const element = findClickableElement();
            
            if (element) {
                const text = element.textContent.trim() || element.getAttribute('aria-label') || 'Elemento';
                console.log(`‚úÖ [${attempts}] Clicando: "${text}"`);
                
                // Simula clique mais natural
                element.focus();
                element.click();
                
                // Dispara eventos adicionais se necess√°rio
                ['mousedown', 'mouseup', 'click'].forEach(eventType => {
                    element.dispatchEvent(new MouseEvent(eventType, {
                        bubbles: true,
                        cancelable: true,
                        view: window
                    }));
                });
                
                completed++;
                await wait(CONFIG.delay);
                
                // Verifica se mudou de p√°gina ou completou algo
                await wait(500);
                
            } else {
                console.log(`üîç [${attempts}] Procurando elementos...`);
                
                // Verifica se chegou ao final
                if (attempts > 10 && !findClickableElement()) {
                    const indicators = [
                        '.completed', '.finished', '.done',
                        '[data-testid*="complete"]',
                        'text*="Parab√©ns"', 'text*="Completed"',
                        '.success-message'
                    ];
                    
                    if (indicators.some(sel => document.querySelector(sel))) {
                        console.log('üéâ ATIVIDADES COMPLETADAS!');
                        break;
                    }
                }
                
                await wait(CONFIG.delay * 2);
            }
            
            // Scroll ocasional para carregar conte√∫do
            if (attempts % 5 === 0) {
                window.scrollTo(0, document.body.scrollHeight / 2);
                await wait(500);
                window.scrollTo(0, 0);
            }
        }
        
        console.log(`üèÅ AUTOMA√á√ÉO FINALIZADA!`);
        console.log(`üìä Estat√≠sticas:`);
        console.log(`   ‚Ä¢ Tentativas: ${attempts}`);
        console.log(`   ‚Ä¢ Cliques realizados: ${completed}`);
        console.log(`   ‚Ä¢ Status: ${completed > 0 ? 'Sucesso' : 'Nenhuma a√ß√£o encontrada'}`);
        
        // Notifica√ß√£o visual
        if (completed > 0) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 20px; right: 20px; z-index: 10000;
                background: linear-gradient(45deg, #4CAF50, #45a049);
                color: white; padding: 15px 20px; border-radius: 10px;
                font-family: Arial, sans-serif; font-weight: bold;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                animation: slideIn 0.5s ease-out;
            `;
            notification.innerHTML = `üéâ Automa√ß√£o conclu√≠da!<br>‚úÖ ${completed} a√ß√µes realizadas`;
            document.body.appendChild(notification);
            
            setTimeout(() => notification.remove(), 5000);
        }
    }
    
    // Adiciona CSS para anima√ß√£o
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
    
    // INICIA AUTOMATICAMENTE!
    autoComplete();
    
})();
            </div>
            
            <button class="btn" onclick="copyScript()">üìã Copiar Script</button>
        </div>
        
        <div class="card">
            <h3>üìñ Como Usar</h3>
            <div class="instructions">
                <strong>Passo a passo:</strong><br>
                1. Abra o Speak no navegador<br>
                2. Pressione F12 para abrir o console<br>
                3. Cole o script acima e pressione Enter<br>
                4. Digite <code>speakBot.start()</code> e pressione Enter<br>
                5. Para parar: <code>speakBot.stop()</code>
            </div>
        </div>
        
        <div class="card">
            <h3>‚öôÔ∏è Configura√ß√µes Avan√ßadas</h3>
            <p>Voc√™ pode ajustar o script para suas necessidades:</p>
            
            <button class="btn secondary" onclick="showAdvancedSettings()">‚öôÔ∏è Configura√ß√µes</button>
            <button class="btn secondary" onclick="showSelectors()">üéØ Seletores CSS</button>
            
            <div id="advanced-settings" style="display: none; margin-top: 15px;">
                <div class="code-snippet">
// Ajustar velocidade (em milissegundos)
speakBot.delay = 3000; // 3 segundos entre a√ß√µes

// Verificar se est√° funcionando
console.log(speakBot.isRunning); // true/false
console.log(speakBot.completedTasks); // n√∫mero de tarefas
                </div>
            </div>
            
            <div id="selectors-info" style="display: none; margin-top: 15px;">
                <p><strong>Dica:</strong> Se o script n√£o funcionar, pode ser que os seletores CSS mudaram. Voc√™ pode:</p>
                <ol>
                    <li>Clicar com bot√£o direito no bot√£o que quer automatizar</li>
                    <li>Escolher "Inspecionar elemento"</li>
                    <li>Copiar o seletor CSS</li>
                    <li>Adicionar ao array de seletores no script</li>
                </ol>
            </div>
        </div>
        
        <div class="card">
            <h3>üîß Bookmarklet (Vers√£o R√°pida)</h3>
            <p>Arraste este link para sua barra de favoritos para acesso r√°pido:</p>
            
            <a href="javascript:(function(){class SpeakAutomation{constructor(){this.isRunning=false;this.completedTasks=0;this.delay=2000}wait(ms){return new Promise(resolve=>setTimeout(resolve,ms))}async clickElement(selector,description){const element=document.querySelector(selector);if(element){console.log(`‚úÖ Clicando em: ${description}`);element.click();await this.wait(this.delay);return true}console.log(`‚ùå N√£o encontrado: ${description}`);return false}async automateActivities(){console.log('üöÄ Iniciando automa√ß√£o...');this.isRunning=true;const selectors=[{selector:'[data-testid=\"continue-button\"]',desc:'Bot√£o Continuar'},{selector:'.continue-btn',desc:'Continuar Aula'},{selector:'[data-testid=\"next-button\"]',desc:'Pr√≥ximo'},{selector:'.lesson-complete-btn',desc:'Completar Li√ß√£o'},{selector:'[data-testid=\"practice-button\"]',desc:'Praticar'},{selector:'.start-lesson',desc:'Iniciar Li√ß√£o'}];while(this.isRunning){let foundAction=false;for(let item of selectors){if(await this.clickElement(item.selector,item.desc)){foundAction=true;this.completedTasks++;break}}if(!foundAction){console.log('üîç Procurando por mais atividades...');await this.wait(3000);if(!document.querySelector('.lesson, .activity, .practice')){console.log('‚úÖ Parece que n√£o h√° mais atividades pendentes!');this.stop()}}await this.wait(1000)}}stop(){this.isRunning=false;console.log(`üèÅ Automa√ß√£o finalizada! Tarefas completadas: ${this.completedTasks}`)}start(){if(this.isRunning){console.log('‚ö†Ô∏è Automa√ß√£o j√° est√° rodando!');return}this.automateActivities()}}window.speakBot=new SpeakAutomation();speakBot.start();})();" 
                   class="btn" 
                   style="text-decoration: none; display: inline-block;">
                üöÄ Speak Auto Bot
            </a>
            
            <p><small>Arraste o link acima para sua barra de favoritos, depois clique nele quando estiver no Speak!</small></p>
        </div>
    </div>

    <script>
        function copyScript() {
            const scriptElement = document.getElementById('script-code');
            const text = scriptElement.textContent;
            
            navigator.clipboard.writeText(text).then(() => {
                alert('‚úÖ Script copiado! Cole no console do navegador (F12)');
            });
        }
        
        function showAdvancedSettings() {
            const div = document.getElementById('advanced-settings');
            div.style.display = div.style.display === 'none' ? 'block' : 'none';
        }
        
        function showSelectors() {
            const div = document.getElementById('selectors-info');
            div.style.display = div.style.display === 'none' ? 'block' : 'none';
        }
    </script>
</body>
</html>
